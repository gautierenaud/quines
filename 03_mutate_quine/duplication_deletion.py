code = [
    b'696d706f727420636f64656373',
    b'696d706f72742072616e646f6d',
    b'2373686f7720686f7720746f206765742074686520656e636f64656420636f646520286973207468697320616e20696e74726f6e203f29',
    b'64656620656e636f64655f636f646528636f64653a20737472293a207072696e7428636f646563732e656e636f646528636f64652e656e636f646528277574663827292c2027686578272929',
    b'2372616e646f6d6c7920636f6d6d656e74206120636f6465206966206974206973206e6f7420616c7265616479206120636f6d6d656e74',
    b'64656620636f6d6d656e7428636f64653a206279746573293a2072657475726e20286227323327206966206e6f7420636f64652e737461727473776974682862273233272920616e642072616e646f6d2e72616e646f6d2829203e20302e39393920656c73652062272729202b20636f6465',
    b'2372616e646f6d6c7920756e636f6d6d656e74206120636f6465206966206974206973206120636f6d6d656e74',
    b'64656620756e636f6d6d656e7428636f64653a206279746573293a2072657475726e2028636f64655b323a5d20696620636f64652e737461727473776974682862273233272920616e642072616e646f6d2e72616e646f6d2829203e20302e39393920656c736520636f646529',
    b'2372616e646f6d6c79206368616e6765206f6e6520636861722073657175656e6365',
    b'646566206d75746174655f706f7274696f6e28636f64653a206279746573293a',
    b'2020202069662072616e646f6d2e72616e646f6d2829203e20302e3939393a',
    b'202020202020202069203d2072616e646f6d2e72616e64696e7428302c206c656e28636f646529202f2f203229',
    b'20202020202020206e65775f76616c7565203d20666f726d61742872616e646f6d2e72616e64696e7428302c20323535292c20277827292e656e636f64652829',
    b'2020202020202020636f6465203d20636f64655b3a692a325d202b206e65775f76616c7565202b20636f64655b692a322b323a5d',
    b'2020202072657475726e20636f6465',
    b'2372656d6f76652072616e646f6d206c696e65206f6620636f6465',
    b'6465662073757070726573735f636f646528636f6465293a',
    b'2020202069662072616e646f6d2e72616e646f6d2829203e20302e3939393a20636f64652e706f702872616e646f6d2e72616e64696e7428302c206c656e28636f6465292929',
    b'236475706c69636174652072616e646f6d206c696e65206f6620636f6465',
    b'646566206475706c69636174655f636f646528636f6465293a',
    b'2020202069662072616e646f6d2e72616e646f6d2829203e20302e3939393a20636f64652e696e736572742872616e646f6d2e72616e64696e7428302c206c656e28636f646529292c20636f64655b72616e646f6d2e72616e64696e7428302c206c656e28636f646529295d29',
    b'7072696e742827636f6465203d205b2729',
    b'666f72206320696e20636f64653a207072696e7428272020202027202b20737472286329202b20272c2729',
    b'7072696e7428275d2729',
    b'6475706c69636174655f636f646528636f646529',
    b'73757070726573735f636f646528636f646529',
    b'666f72206320696e20636f64653a',
    b'2020202063203d20636f6d6d656e74286329',
    b'2020202063203d20756e636f6d6d656e74286329',
    b'2020202063203d206d75746174655f706f7274696f6e286329',
    b'202020207072696e7428636f646563732e6465636f646528632c202768657827292e6465636f6465282929',
]
import codecs
import random
#show how to get the encoded code (is this an intron ?)
def encode_code(code: str): print(codecs.encode(code.encode('utf8'), 'hex'))
#randomly comment a code if it is not already a comment
def comment(code: bytes): return (b'23' if not code.startswith(b'23') and random.random() > 0.999 else b'') + code
#randomly uncomment a code if it is a comment
def uncomment(code: bytes): return (code[2:] if code.startswith(b'23') and random.random() > 0.999 else code)
#randomly change one char sequence
def mutate_portion(code: bytes):
    if random.random() > 0.999:
        i = random.randint(0, len(code) // 2)
        new_value = format(random.randint(0, 255), 'x').encode()
        code = code[:i*2] + new_value + code[i*2+2:]
    return code
#remove random line of code
def suppress_code(code):
    if random.random() > 0.999: code.pop(random.randint(0, len(code)))
#duplicate random line of code
def duplicate_code(code):
    if random.random() > 0.999: code.insert(random.randint(0, len(code)), code[random.randint(0, len(code))])
print('code = [')
for c in code: print('    ' + str(c) + ',')
print(']')
duplicate_code(c)
suppress_code(c)
for c in code:
    c = comment(c)
    c = uncomment(c)
    c = mutate_portion(c)
    print(codecs.decode(c, 'hex').decode())
